<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>conan使用简要实例</title>
      <link href="/C/conan-example/"/>
      <url>/C/conan-example/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Java开发中,我们有maven做依赖管理,在PHP开发中我们有Composer做管理,Android、iOS、Python、NodeJS等等都有各自的管理工具,但是C/C++没那么幸运了,很晚才出现包管理工具.</p><p>在C/C++开发的时候,尤其是Linux开发.我们需要加入一些第三方的依赖,例如Openssl或者其他的一些库.之前我们或者直接在系统安装开发包;或者从源码编译,然后引用.过程是痛苦的,管理是混乱的.想我这样有不想把系统”搞脏”,又不想自己去build,急需一个工具替我进行管理,解放我的双手.</p><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><p>在网上没有一个权威的管理工具,也许是因为C/C++太自由了吧,勉强找到两个工具一个是<a href="https://www.conan.io" target="_blank" rel="noopener">conan</a> 、一个是<a href="https://github.com/biicode/" target="_blank" rel="noopener">biicode</a>,但是biicode服务器已经关闭了,代码也是两年前的了,基本是废了,不用考虑.如果有精力的话可以折腾一下它的代码,试着自己搭建一个服务器.</p><p>接下来我们就试着用conan来管理我们的项目.</p><h1 id="conan使用"><a href="#conan使用" class="headerlink" title="conan使用"></a>conan使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>conan是用python写的,所以在安装conan之前要先安装Python,当然*nix系统自带了Python,如果是Windows用户,建议安装Python2.7, py3是异端啊!!! py的安装就不赘述了.</p><p>Python安装好之后执行一下代码安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> conan</span><br></pre></td></tr></table></figure><p>之后运行<code>conan</code>,输出一大堆信息表示安装成功了.</p><p>conan推荐用<a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a>组织项目,所以,还需要下载CMake.</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>用官网给出的Timer例子进行示范,可以通过下面的命令获取项目</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/memsharded/example-poco-timer.git mytimer</span><br></pre></td></tr></table></figure><p>或者自己在文件夹下创建三个文件<strong>timer.cpp</strong> <strong>conanfile.txt</strong> <strong>CMakeLists.txt</strong></p><p><strong>timer.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $Id: //poco/1.4/Foundation/samples/Timer/src/Timer.cpp#1 $</span></span><br><span class="line"><span class="comment">// This sample demonstrates the Timer and Stopwatch classes.</span></span><br><span class="line"><span class="comment">// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.</span></span><br><span class="line"><span class="comment">// and Contributors.</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier:     BSL-1.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Poco/Timer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Poco/Thread.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Poco/Stopwatch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Poco::Timer;</span><br><span class="line"><span class="keyword">using</span> Poco::TimerCallback;</span><br><span class="line"><span class="keyword">using</span> Poco::Thread;</span><br><span class="line"><span class="keyword">using</span> Poco::Stopwatch;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerExample</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        TimerExample()&#123; _sw.start();&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(Timer&amp; timer)</span></span>&#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Callback called after "</span> &lt;&lt; _sw.elapsed()/<span class="number">1000</span> &lt;&lt; <span class="string">" milliseconds."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        Stopwatch _sw;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">        TimerExample example;</span><br><span class="line">        <span class="function">Timer <span class="title">timer</span><span class="params">(<span class="number">250</span>, <span class="number">500</span>)</span></span>;</span><br><span class="line">        timer.start(TimerCallback&lt;TimerExample&gt;(example, &amp;TimerExample::onTimer));</span><br><span class="line"></span><br><span class="line">        Thread::sleep(<span class="number">5000</span>);</span><br><span class="line">        timer.stop();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>conanfile.txt</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[requires]</span></span><br><span class="line">Poco/1.7.3@lasote/stable</span><br><span class="line"></span><br><span class="line"><span class="section">[generators]</span></span><br><span class="line">cmake</span><br></pre></td></tr></table></figure><p><strong>conanfile.txt</strong> 是用来声明依赖的,依赖可以在其官网<a href="https://www.conan.io/search?q=*" target="_blank" rel="noopener">搜索</a>,要看清相关的依赖是否支持工作的操作系统<br>文件中有四个值<code>[requires]</code>、<code>[generators]</code>、<code>[options]</code>、<code>[imports]</code></p><ul><li>[options] 用来配置包的一些属性,例如Poco:shared=True,格式为 <code>库名称:属性=值</code></li><li>[requires] 用来申明依赖,每一行代表一个依赖</li><li>[generators] 指明依赖build的工具,多数是cmake</li><li>[imports] 用来拷贝动态链接库</li></ul><p><strong>CMakeLists.txt</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">project</span><span class="params">(FoundationTimer)</span></span></span><br><span class="line"><span class="function"><span class="title">cmake_minimum_required</span><span class="params">(VERSION <span class="number">2.8</span>.<span class="number">12</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">include</span><span class="params">($&#123;CMAKE_BINARY_DIR&#125;/conanbuildinfo.cmake)</span></span></span><br><span class="line"><span class="function"><span class="title">conan_basic_setup</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">(timer timer.cpp)</span></span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(timer $&#123;CONAN_LIBS&#125;)</span></span></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在项目根目录新创建一个文件夹进行编译工作</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure><p>在依赖安装之前我们要查看一下我们的依赖信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conan <span class="builtin-name">info</span> <span class="built_in">..</span></span><br></pre></td></tr></table></figure><p>如果这些依赖之前用过那么就需要我们只需要执行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">conan</span></span> install ..</span><br></pre></td></tr></table></figure><p>如果有一些依赖我们之前没有没有用过,需要执行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">conan</span></span> install .. --build lib1name lib2name ....<span class="comment">//libname表示之前没有使用过的依赖名称例如 OpenSSL等等(不需要理会 zlib 和electric-fence)</span></span><br></pre></td></tr></table></figure><p>因为需要对依赖进行编译,所以等待时间稍长.</p><p>命令执行完之后,对项目进行编译</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">(win)</span></span><br><span class="line">$ cmake <span class="string">..</span> -G <span class="string">"Visual Studio 14 Win64"</span></span><br><span class="line">$ cmake <span class="params">--build</span> . <span class="params">--config</span> Release</span><br><span class="line"></span><br><span class="line"><span class="params">(linux, mac)</span></span><br><span class="line">$ cmake <span class="string">..</span> -G <span class="string">"Unix Makefiles"</span> -DCMAKE_BUILD_TYPE=Release</span><br><span class="line">$ cmake <span class="params">--build</span> .</span><br></pre></td></tr></table></figure><p>编译之后,执行<code>./bin/timer</code>便大功告成</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>  如果设置库 share=ture,那么该库就会以链接的方式而不打包进可执行文件<br>  添加 conanfile.txt 如下:<br>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">options</span>]</span><br><span class="line">Poco:shared=<span class="keyword">True</span></span><br></pre></td></tr></table></figure><br>  再次进行编译,发现这次生成的文件会比之前小很多,而且执行 <code>ldd ./bin/timer</code>, 发现可执行文件链接了一个*<em>libPocoFoundation.so.43</em>的库</p><h3 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h3>  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[imports]</span><br><span class="line">bin, *.dll -&gt; ./bin <span class="comment"># Copies all dll files from packages bin folder to my "bin" folder</span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>, *.<span class="title">dylib</span>* -&gt; ./<span class="title">bin</span> <span class="comment"># Copies all dylib files from packages lib folder to my "bin" folder</span></span></span><br></pre></td></tr></table></figure><p>  用来拷贝动态链接库对Linux没用</p><hr><p>相关链接</p><ul><li><a href="http://docs.conan.io/en/latest/index.html" target="_blank" rel="noopener">conan帮助文档</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaJs连接桥的实现</title>
      <link href="/Android/java_js_bridge/"/>
      <url>/Android/java_js_bridge/</url>
      
        <content type="html"><![CDATA[<h1 id="Java与Js调用"><a href="#Java与Js调用" class="headerlink" title="Java与Js调用"></a>Java与Js调用</h1><p>在Android开发中常用Java代码调用js的情况.这种比较简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webView..getSettings()..setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">webView.loadUrl(<span class="string">"javascript:function()"</span>);</span><br></pre></td></tr></table></figure><p>Js调用Java的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java部分</span></span><br><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> Functions(), <span class="string">'name'</span>);<span class="comment">//API 17以上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Functions</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此函数被Js调用</span></span><br><span class="line">  <span class="meta">@JavascriptInterface</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">///TODO</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Js部分</span></span><br><span class="line"><span class="built_in">window</span>.name<span class="function">.<span class="keyword">function</span>(<span class="params"></span>)</span></span><br></pre></td></tr></table></figure><h1 id="关于连接桥"><a href="#关于连接桥" class="headerlink" title="关于连接桥"></a>关于连接桥</h1><p>在Js调用Java部分不算是麻烦,但是在Java调用Js时候要把函数名参数等转换为字符串,比较麻烦.因为用过retrofit,对他的简洁很喜欢.于是仿照retrofit,利用Java的动态代理重新封装了一个JavaJs连接桥.<br>思路如下:<br>利用接口中函数的注解和参数列表保存Js方法的信息,方法名和参数.利用接口中函数的对象进行序列化请求字符串,例如”javascript:showMsg(‘Hello’)”</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>TestFunction</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TestFunction</span></span><br><span class="line">    <span class="meta">@Js</span>(method = <span class="string">"show"</span>)</span><br><span class="line">    <span class="function">CallResult&lt;Void&gt; <span class="title">showMsg</span><span class="params">(String msg)</span></span>;</span><br><span class="line">    <span class="meta">@Js</span>(method = <span class="string">"add"</span>)</span><br><span class="line">    <span class="function">CallResult&lt;Integer&gt; <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>TestReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReceiver</span> <span class="keyword">implements</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestReceiver</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext=context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;<span class="comment">//js调用其中方法时为window.test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        Toast.makeText(mContext,msg,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///TestActivity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JavaJsBridge mJavaJsBridge;</span><br><span class="line">    <span class="keyword">private</span> TestFunction mFunction;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_test);</span><br><span class="line">        WebView webView=(WebView) findViewById(R.id.web_view);</span><br><span class="line">        webView.loadUrl(<span class="string">"file:///android_asset/html/index.html"</span>);</span><br><span class="line">        mJavaJsBridge= <span class="keyword">new</span> JavaJsBridge.Builder()</span><br><span class="line">          .adapter(<span class="keyword">new</span> CallAdapter())<span class="comment">//adapter 定义了如何实现接口方法的返回对象,实现 IAdapter</span></span><br><span class="line">          .receive(<span class="keyword">new</span> TestReceiver(<span class="keyword">this</span>))<span class="comment">//Js调用Java时,会调用TestReceiver里面的函数,此类实现Receiver接口.可以调用</span></span><br><span class="line">          .converter(<span class="keyword">new</span> ConverterFactory.JsonConverter())<span class="comment">//定义了当Java传对象给Js的时候如何解析</span></span><br><span class="line">          .inject(webView)</span><br><span class="line">          .build();<span class="comment">//构造连接桥</span></span><br><span class="line">        mFunction=mJavaJsBridge.create(TestFunction<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//获取实例</span></span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClick</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用Js,没有有参数仅限API 19以上</span></span><br><span class="line">         mFunction.add(<span class="number">1</span>,<span class="number">1</span>).ifSuccess(<span class="keyword">new</span> Success&lt;Integer&gt;() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                 Toast.makeText(getBaseContext(),value.toString(),Toast.LENGTH_LONG).show();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;).ifError(<span class="keyword">new</span> Failure() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failure</span><span class="params">(Throwable value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;).call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">      <span class="comment">//调用Js,没有返回参数</span></span><br><span class="line">        mFunction.showMsg(<span class="string">"Hello"</span>).call();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>  <span class="attr">onclick</span>=<span class="string">"android()"</span>&gt;</span>显示Toast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(msg)</span></span>&#123;</span></span><br><span class="line">        alert(msg)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a,b)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> a+b</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">android</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.test.showMsg(<span class="string">"Hello"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://xietzt-blog.oss-cn-beijing.aliyuncs.com/blogJavaJsBridge.gif" alt="效果"></p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/francisCN/JsBridge" target="_blank" rel="noopener">JavaJs连接桥的实现</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决DataBinding和kotlin共用报错的问题</title>
      <link href="/Android/DataBinding-kotlin-error/"/>
      <url>/Android/DataBinding-kotlin-error/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Kotlin 是一种在 Java虚拟机上执行的静态型别编程语言，它也可以被编译成为JavaScript源代码。它主要是由俄罗斯圣彼得堡的JetBrains开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。[2] 在2012年一月的著名期刊Dr. Dobb’s Journal中 Kotlin 被认为是该月份最佳语言。[3] 虽然跟 Java 语法并不相容，但 Kotlin 被设计成可以和 Java 程式码相互运作，并可以重复使用如Java集合框架等的现有Java 类别库。 —-<a href="https://zh.wikipedia.org/wiki/Kotlin" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>两天kotlin1.0正式版发布的事情在Android 开发者和Java程序员中炸开了锅。其中不少Android程序员们肯定都想试试这个新玩意。但是如果你之前已经习惯于用Data Binding框架开发的话，你肯定会遇到这样一个问题：DataBinding和kotlin放在一个项目中编译执行会报错。如下图</p><p><img src="https://xietzt-blog.oss-cn-beijing.aliyuncs.com/blogdatabinding-kotlin_error.png" alt="错误信息"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>本解决方案抄袭于<a href="http://qiita.com/umetsu/items/487d38be86c31ff59075" target="_blank" rel="noopener">此处</a> 在app下的build.gradle文件中添加下列代码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">     <span class="comment">// ... 略 </span></span><br><span class="line">     kapt <span class="string">'com.android.databinding:compiler:1.0-rc5'</span><span class="comment">//如果解决不了把版本改为你项目的版本 </span></span><br><span class="line">&#125; </span><br><span class="line">kapt &#123; </span><br><span class="line">    generateStubs = <span class="keyword">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xietzt-blog.oss-cn-beijing.aliyuncs.com/blog%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="解决方案"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> DataBinding </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataBinding双向绑定</title>
      <link href="/Android/databinding-two-way/"/>
      <url>/Android/databinding-two-way/</url>
      
        <content type="html"><![CDATA[<h1 id="DataBinding简介"><a href="#DataBinding简介" class="headerlink" title="DataBinding简介"></a>DataBinding简介</h1><blockquote><p><a href="http://developer.android.com/intl/zh-cn/tools/data-binding/guide.html" target="_blank" rel="noopener">DataBinding</a>是由谷歌公司于2015年发布的Android数据绑定库，已更新为正式版。</p></blockquote><p> DataBinding使我们远离了findViewById和各种的setValue，大大大简化了开发工作，也是的Android从官方层面上支持MVVM模式的体现。</p><h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><p> 用过此框架的童鞋们知道，DataBinding库虽然已经实现了单向绑定，即数据的改变直接影响视图显示，但是没有实现双向绑定，即视图的改变影响数据。这离MVVM模式还差了一步。是否有解决的方案呢？答案是肯定的。<br><img src="https://xietzt-blog.oss-cn-beijing.aliyuncs.com/blogMVVM.png" alt="MVVM示意图"></p><h1 id="实现Data-Binding双向绑定"><a href="#实现Data-Binding双向绑定" class="headerlink" title="实现Data Binding双向绑定"></a>实现Data Binding双向绑定</h1><p>废话说完，步入正题，我们实现原则是，尽量少写代码，尽量用原有的框架实现。（谁叫我懒呢）实现的原理便是绑定事件监听。在Data Binding中官方集成了很多实用的事件绑定，他们的声明藏在<code>android.databinding.adapters</code>包下以<code>BindingAdapter</code>为结尾的类中，下图为包中的部分截图。（全部的太长了，手懒）</p><p><img src="https://xietzt-blog.oss-cn-beijing.aliyuncs.com/blogBindingAdapter.png" alt="BindingAdapter"></p><h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><p>接下来我们就以EditText为例实现数据的双向绑定。 对于EditText控件我们需要绑定一个事件监听内容的实时变化，好在Data Binding已经在<strong>android.databinding.adapters</strong>包下的<strong>TextViewBindingAdapter</strong>为我们定义好了监听，我们可以通过在布局文件中用<code>android:afterTextChanged＝function(Editable s)</code>实现，如果把它和元素的setter函数绑定，就可以不用增加单独的监听函数。 下面是实例代码</p><h2 id="ViewModel层"><a href="#ViewModel层" class="headerlink" title="ViewModel层"></a>ViewModel层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObservableField&lt;String&gt; userName; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewModel</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        userName=<span class="keyword">new</span> ObservableField&lt;&gt;(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName.get(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(Editable userName)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.userName.set(String.valueOf(userName)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="View层－XML"><a href="#View层－XML" class="headerlink" title="View层－XML"></a>View层－XML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">"com.xiezt.test.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"viewModel"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"com.example.databinding.ViewModel"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/mainLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/edit"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:afterTextChanged</span>=<span class="string">"@&#123;viewModel.setUserName&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;viewModel.userName&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"onclick"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"OK"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="View层-Activity"><a href="#View层-Activity" class="headerlink" title="View层 Activity"></a>View层 Activity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">private</span> ViewModel viewModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        viewModel = <span class="keyword">new</span> ViewModel();</span><br><span class="line">        binding.setViewModel(viewModel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onclick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(), viewModel.getUserName(), Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://xietzt-blog.oss-cn-beijing.aliyuncs.com/blogdatabinding_two_way.gif" alt="效果图"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在官方还没有进一步完善此框架时，用现有的事件绑定来实现双向绑定算作是较为简单的解决方案。其他控件的双向绑定的解决思路，由于EditText事件的特殊性，我们不用单独写函数，但是其他控件不一定，例如CheckBox，它的绑定函数需要需要传递两个值，需要我们自己单独写。</p><hr><p>相关链接</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">MVC，MVP 和 MVVM 的图示</a></li><li><a href="http://www.jianshu.com/p/b1df61a4df77" target="_blank" rel="noopener">Data Binding（数据绑定）用户指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> DataBinding </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
